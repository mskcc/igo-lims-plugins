package com.velox.sloan.cmo.workflows.strauthentication;

import com.velox.api.datarecord.DataRecord;
import com.velox.api.datarecord.NotFound;
import com.velox.api.plugin.PluginResult;
import com.velox.api.util.ServerException;
import com.velox.api.workflow.ActiveTask;
import com.velox.api.workflow.ActiveWorkflow;
import com.velox.sapio.commons.exemplar.plugin.PluginOrder;
import com.velox.sapioutils.server.plugin.DefaultGenericPlugin;
import com.velox.sapioutils.shared.utilities.CsvHelper;
import com.velox.sloan.cmo.workflows.IgoLimsPluginUtils.IgoLimsPluginUtils;
import org.apache.commons.lang3.StringUtils;
import org.json.simple.JSONArray;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.rmi.RemoteException;
import java.util.*;

/**
 * This plugin is designed to process the STR cell line authentication results using an external API from Cellosaurus company.
 * The user will upload raw results file generated by STR raw results analysis tool and upload it to LIMS when prompted. The
 * plugin returns a formatted csv file with results from API.
 *
 * @author sharmaa1
 */
public class StrReportGenerator extends DefaultGenericPlugin {
    IgoLimsPluginUtils utils = new IgoLimsPluginUtils();
    StrHelper strHelper = new StrHelper();
    private final List<String> STR_MARKERS = Arrays.asList("Amelogenin","CSF1PO","D2S1338","D3S1358","D5S818","D7S820","D8S1179","D13S317","D16S539","D18S51", "D19S433", "D21S11", "FGA", "TH01", "TPOX", "vWA");
    private final List<String> STR_REPORT_HEADERS = Arrays.asList("IGO ID", "Accession","Name","Score","AMEL","CSF1PO","D2S1338","D3S1358","D5S818","D7S820","D8S1179","D13S317","D16S539","D18S51", "D19S433", "D21S11", "FGA", "TH01", "TPOX", "vWA");
    private final String STR_REPORT_TAG = "GENERATE STR REPORT";

    public StrReportGenerator() {
        setTaskEntry(true);
        setTaskToolbar(true);
        setLine1Text("Generate STR");
        setLine2Text("Report");
        setOrder(PluginOrder.EARLY.getOrder());
    }

    @Override
    public boolean shouldRun() throws RemoteException {
        return activeTask.getStatus() != ActiveTask.COMPLETE && activeTask.getTask().getTaskOptions().containsKey(STR_REPORT_TAG);
    }

    @Override
    public boolean onTaskToolbar(ActiveWorkflow activeWorkflow, ActiveTask activeTask) {
        try {
            return activeTask.getTask().getTaskOptions().containsKey(STR_REPORT_TAG);
        } catch (RemoteException e) {
            logError(Arrays.toString(e.getStackTrace()));
        }
        return false;
    }

    public PluginResult run() throws ServerException {
        try {
            String uploadedFile = clientCallback.showFileDialog("Upload Raw data file", ".csv");
            if (StringUtils.isBlank(uploadedFile)) {
                logInfo("User did not upload the file.");
                return new PluginResult(true);
            }
            //validate the uploaded file
            if (!isValidFile(uploadedFile)) {
                return new PluginResult(false);
            }
            //read data from uploaded file
            List<String> fileData = utils.readDataFromCsvFile(clientCallback.readBytes(uploadedFile));
            if(!fileHasData(fileData, uploadedFile)){
                return new PluginResult(false);
            }
            Map<String, Integer> headerValueMap = utils.getCsvHeaderValueMap(fileData);
            //read and clean data for posting to api
            Map<String,Map<String, Object>> data = strHelper.aggregateDataBySample(fileData, headerValueMap);
            List<String> jsonData = strHelper.convertSampleDataToJson(data);
            //call method to get data from api
            JSONArray results = getStrResultsFromApi(jsonData.toString());
            //process data coming from api
            if (results == null) throw new AssertionError();
            Map<String, Map<String,Map<String, Object>>> sampleData = strHelper.getSampleDataFromApiData(results);
            List<DataRecord> attachedSamples = activeTask.getAttachedDataRecords("Sample", user);
            if (attachedSamples.size()==0){
                clientCallback.displayError("Samples not found attached to this task.");
                return new PluginResult(false);
            }
            //process further to format for csv export
            parseDataForCsvFile(sampleData, attachedSamples, data);
        } catch (Exception e) {
            logError(Arrays.asList(e.getStackTrace()).toString());
            clientCallback.displayError(e.getMessage());
        }
        return new PluginResult(true);
    }

    /**
     * Method to check if uploaded excel file is valid csv file.
     * @param uploadedFile
     * @return true/false
     * @throws ServerException
     * @throws IOException
     */
    private boolean isValidFile(String uploadedFile) throws ServerException, IOException {
        if (!utils.isCsvFile(uploadedFile)) {
            clientCallback.displayError(String.format("Not a valid csv file\n%s", uploadedFile));
            return false;
        }
        return true;
    }

    /**
     * Method to check if the uplaoded file has data.
     * @param fileData
     * @param uploadedFile
     * @return true/false
     * @throws ServerException
     */
    private boolean fileHasData(List<String> fileData, String uploadedFile) throws ServerException {
        if (!utils.csvFileHasData(fileData)) {
            clientCallback.displayError(String.format("The uploaded file does not contain data\n%s", uploadedFile));
            return false;
        }
        return true;
    }

    /**
     * Method to send HTTP request to the API and receive results back from API.
     * @param sampleData
     * @return JSONArray
     * @throws ServerException
     * @throws ParseException
     */
    private JSONArray getStrResultsFromApi(String sampleData) throws ServerException, ParseException {
        StringBuilder response = new StringBuilder();
        JSONParser parser = new JSONParser();
        try {
            URL obj = new URL("https://web.expasy.org/cellosaurus-str-search/api/batch");
            HttpURLConnection postConnection = (HttpURLConnection) obj.openConnection();
            postConnection.setRequestMethod("POST");
            postConnection.setRequestProperty("Content-Type", "application/json");
            postConnection.setDoOutput(true);
            OutputStream os = postConnection.getOutputStream();
            os.write(sampleData.getBytes());
            os.flush();
            os.close();
            int responseCode = postConnection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) { //success
                BufferedReader in = new BufferedReader(new InputStreamReader(
                        postConnection.getInputStream()));
                String inputLine = "";
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine.trim());
                }
                in.close();
            } else {
                clientCallback.displayInfo(String.format("API REQUEST DID NOT WORK: %s" ,postConnection.getResponseMessage()));
            }
        }catch (Exception e){
            logInfo(Arrays.toString(e.getStackTrace()));
        }
        if (response.toString().length()==0){
            clientCallback.displayInfo(String.format("API returned 0 result hits.\nData sent to server is:\n%s", sampleData));
            return null;
        }
        return (JSONArray)parser.parse(response.toString());
    }


    /**
     * Method to get IGO ID for samples in the report.
     * @param dataRecords
     * @param sampleName
     * @return String
     * @throws NotFound
     * @throws RemoteException
     */
    private String getIgoId(List<DataRecord> dataRecords, String sampleName) throws NotFound, RemoteException {
        for(DataRecord r : dataRecords){
            if (r.getValue("OtherSampleId", user) != null){
                String otherSampleId = r.getStringVal("OtherSampleId", user);
                if (otherSampleId.equals(sampleName.trim())){
                    return r.getStringVal("SampleId", user);
                }
            }
        }
        return "";
    }

    /**
     * Method to parse and filter data received from API for CSV report. And then generate CSV report.
     * @param extractedData
     * @param attachedSamples
     * @param sampleParamsData
     * @throws NotFound
     * @throws IOException
     * @throws ServerException
     */
    private void parseDataForCsvFile(Map<String, Map<String,Map<String, Object>>> extractedData, List<DataRecord> attachedSamples, Map<String,Map<String, Object>> sampleParamsData) throws NotFound, IOException, ServerException {
        List<List<String>> data =  new ArrayList<>();
        data.add(STR_REPORT_HEADERS);
        Set<String> keySet = extractedData.keySet();
        for (String sampleName : keySet){
            List<String> sampleParams = strHelper.getSampleParamsSentToApi(sampleParamsData, sampleName); // first add line containing sample data sent to api
            sampleParams.set(0, getIgoId(attachedSamples, sampleName)); // add IGO ID to sample
            data.add(sampleParams);
            Map<String, Map<String, Object>> valuesByAccession = extractedData.get(sampleName);
            Set<String> accessionKeySet = valuesByAccession.keySet();
//            if (accessionKeySet.isEmpty()){
//                List<String> rowValues = new ArrayList<>();
//                rowValues.add(getIgoId(attachedSamples, sampleName)); // add IGO ID's to row data
//                rowValues.add(""); //add accession value to row data
//                rowValues.add(sampleName); // add sampleName to row Data.
//                data.add(rowValues); // add a row with minimal data if api did not return any results for a sample
//            }
            for(String accession : accessionKeySet){
                //add one row for each result returned by the api. API could return multiple results per sample if there is at least 75% match.
                List<String> rowValues = new ArrayList<>();
                rowValues.add(getIgoId(attachedSamples, sampleName)); // add IGO ID's to row data
                rowValues.add(accession); //add accession value to row data
                rowValues.add(sampleName); // add sampleName to row Data.
                Map<String,Object> alleleData =  valuesByAccession.get(accession);
                String scoreValue = strHelper.getValueFromMap(alleleData, "score");
                if (!StringUtils.isBlank(scoreValue) && scoreValue.length() >= (scoreValue.indexOf(".") + 3)){
                    rowValues.add(strHelper.getValueFromMap(alleleData, "score").substring(0,scoreValue.indexOf(".") +3));
                }
                else{
                    rowValues.add(scoreValue);
                }
                for (String value : STR_MARKERS){
                    rowValues.add(strHelper.getValueFromMap(alleleData, value));
                }
                data.add(rowValues);
            }
        }
        byte [] bytes = CsvHelper.writeCSV(data, null);
        clientCallback.writeBytes(bytes, "STR Report.csv");
    }
}
